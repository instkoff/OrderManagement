@model OrderModel
<h3>Добавить заказ:</h3>
@using (Html.BeginForm("Create", "Order", FormMethod.Post, new {id = "addOrderForm"}))
{
    @(Html.DevExtreme().Form<OrderModel>()
        .ID("add-order-form")
        .ValidationGroup("Order")
        .ColCount(2)
        .Items(items =>
        {
            items.AddGroup().Caption("Детали заказа:").Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.Name)
                    .Name("OrderName")
                    .Editor(e => e.TextBox());
                groupItems.AddSimpleFor(m => m.Date)
                    .Name("OrderDate")
                    .Editor(e => e.DateBox()
                        .DisplayFormat("dd.MM.yyyy hh:mm:ss")
                        .Type(DateBoxType.DateTime)
                        .Value(DateTime.Now));
                groupItems.AddSimpleFor(m => m.Provider.Id)
                    .Name("OrderProvider")
                    .Editor(e => e.SelectBox()
                        .DataSource(d => d.Mvc()
                            .Controller("Order")
                            .LoadAction("GetAllProviders")
                            .Key("Id"))
                        .DisplayExpr("Name")
                        .ValueExpr("Id")
                        .Value(1)
                        .SearchEnabled(true));
                groupItems.AddGroup().Caption("Товары")
                    .Items(orderItemsGroup =>
                    {
                        orderItemsGroup.AddSimpleFor(m => m.OrderItems)
                            .Template(@<text>
                                    @(Html.DevExtreme().DataGrid<OrderItemModel>()
                                        .ID("OrderItems")
                                        .Height(500)
                                        .ShowBorders(true)
                                        .Editing(s=>s.AllowAdding(true).AllowDeleting(true).AllowUpdating(true))
                                        .DataSource(new JS("[]"))
                                        .Columns(
                                        c =>
                                        {
                                            c.AddFor(m=>m.ItemName).Caption("Название товара");
                                            c.AddFor(m => m.Quantity).Caption("Количество");
                                            c.AddFor(m => m.Unit).Caption("Единицы");
                                        })    
                                        .Paging(p => p.PageSize(10))
                                        .FilterRow(f => f.Visible(true))
                                        .HeaderFilter(f => f.Visible(true))
                                        .RemoteOperations(false))

                                   </text>).Label(l=>l.Visible(false));
                });
            });

        })
        .LabelLocation(FormLabelLocation.Left)
        .MinColWidth(150)
        .ReadOnly(false)
        .ShowColonAfterLabel(true)
        .FormData(Model)
        )
    
    @(Html.DevExtreme().Button()
        .Text("Validate and Submit")
        .ValidationGroup("Order")
        .UseSubmitBehavior(false)
        .OnClick("sendOrder")
        )
}
<div>
    <a asp-action="Index" asp-controller="Home">Назад к списку заказов</a>
</div>

@section Scripts
{
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">
        let form = $("#addOrderForm");

        function sendOrder(e) {
            if (e.validationGroup.validate().isValid) {
                $("#OrderItems").dxDataGrid("instance").getDataSource().load().done(function(items) {
                    for (let i = 0; i < items.length; i++) {
                        let item = items[i];
                        console.log(item);
                        for (let property in item) {
                            if (item.hasOwnProperty(property)) {
                                CreateInputElement(property, item[property], i, form[0]);
                                console.log(property);
                            }
                        }
                    }
                    form.submit();
                });
            }
        }
        function CreateInputElement(itemName, itemValue, itemIndex, container) {
            let $input = $("<input/>");
            $input.appendTo(container).attr({ type: "hidden", name: "OrderItems[" + itemIndex + "]." + itemName }).val(itemValue);
        }
        form.on("submit",
            function(e) {
                e.preventDefault();
                if (form.valid()) {
                    let values = form.serializeArray();
                    $.ajax({
                        url: form.attr("action"),
                        data: JSON.stringify(values),
                        type: "POST",
                        contentType: "application/json",
                        success: function() {
                            window.location = "@Url.Action("Index","Home")";
                        },
                        error: function(result) {
                            console.log(values);
                            console.log(result.responseText);
                            alert("Ошибка добавления");
                        }
                    });
                }
            });
    </script>
}
